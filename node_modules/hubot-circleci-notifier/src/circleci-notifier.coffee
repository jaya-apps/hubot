users = {
  'mt-': 'marciotoze',
  'mv-': 'marcusproasheck',
  'md-': 'micheldoumit',
  'mt-': 'marciotoze',
  'bm-': 'breno',
  'eo-': 'eozaki',
  'jt-': 'jtruzzi',
  'pp-': 'prakash'
}

getEnvironment = (branch) ->
  if branch == 'master'
    return 'Production'
  else if branch == 'staging'
    return 'Staging'
  else
    return 'Local'

getChannel = (branch) ->
  if branch == 'master'
    return '#missu'
  else if branch == 'staging'
    return '#missu-dev'

  return users[branch.substring(0,3)]

getIcon = (status) ->
  if status == 'success'
    return 'http://icons.iconarchive.com/icons/virtuallnk/web/16/Success-icon.png'
  else
    return 'http://www.gruppomedicochirurgicotoscano.com/images/alert_icon.gif'

getStatusColor = (status) ->
  if status == 'success'
    return 'good'
  else if status == 'failed'
    return 'danger'
  else
    return 'warning'

buildText = (body) ->
  message = " #{body.subject}, #{body.all_commit_details.length} commits (<#{body.compare}|diff>)"
  return message

getStepFailed = (steps) ->
  for step in steps
    if step.actions[0].status == 'failed'
      return step

module.exports = (robot) ->
  robot.router.post "/hubot/circleci/say", (req, res) ->
    body = req.body.payload
    room = getChannel(body.branch)

    fields = []
    fields.push
      value: buildText(body)
      short: false

    step_failed = getStepFailed(body.steps)
    fields.push
      value: "--> #{step_failed.name}: failed" if step_failed
      short: false

    fields.push
      title: "Branch"
      value: body.branch
      short: true
    fields.push
      title: "Environment"
      value: getEnvironment(body.branch)
      short: true
    if room? == false
      fields.push
        value: "use sempre suas iniciais como nome do branch (ex: mt-meu-branch) ainda n√£o tem PR aberto?, altere agora. 'git branch -m mt-novo-nome'"
        short: false

    payload =
      channel: room or '#missu-dev'
      content:
        author_name: "Build ##{body.build_num} - #{body.outcome.toUpperCase()}"
        author_link: body.build_url
        author_icon: getIcon(body.outcome)
        fallback: "Build ##{body.build_num} - #{body.outcome.toUpperCase()}"
        color: getStatusColor(body.outcome)
        fields: fields

    robot.emit 'slack-attachment', payload
